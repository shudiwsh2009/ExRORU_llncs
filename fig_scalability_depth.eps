%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fig_scalability_depth.pdf
%%Creator: Adobe Acrobat 15.9.0
%%For: Shudi
%%CreationDate: 2015/12/6, 22:32:28
%%BoundingBox: 4 2 208 124
%%HiResBoundingBox: 0 0 360 216
%%CropBox: 0 0 360 216
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 535 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreatorTool="cairo 1.10.2 (http://cairographics.org)"
   pdf:Producer="cairo 1.10.2 (http://cairographics.org)"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -216 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 216 li
360 216 li
360 0 li
cp
clp
gsave
0 216 mo
360 216 li
360 0 li
0 0 li
cp
clp
.5 lw
0 lc
0 lj
3.8 ml
[] 0 dsh
true sadj
34.648 189.648 mo
38.602 189.648 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
@
203.25 189.648 mo
199.301 189.648 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 Initial
ct_T42Dict begin
-0.598 -0.418 1.852 1.031
 256 array 0 1 255 {1 index exch /.notdef put} for  /XCNAAA+CairoFont-0-0
Type42DictBegin
[<00010000000a000a000a000a6376742089dd9694000000ac000003086670
676dd76941d0000003b40000101c676c7966aa0d4e6c00001b90000041ac
68656164e96a94e5000013d0000000366868656112090814000014080000
0024686d7478ae770fbc0000142c000000a46c6f636100051724000014d0
000000a86d61787004d0063f00001578000000207072657069b9dc070000
1598000005f767646972000000000000000000000000061e061405f005d1
047c045d03d200100000ffe7ffe1fe78fe64fe59039b00270000009600aa
00b900c600ce000000000000000000bc00c200000000007600b200c000cb
0000000000000000000000000081009400a600cc00da00ef000000000000
00000098009e00ab00b000000097009e007d0166017c00900098009e00a4
00a900ae00b300ba00c30000000000000000000000000000000000000000
00000000000000000000000000d3011d00000000000000c3021401c20000
000000e9000c02d10173018e009700970042004200c60000000000000000
000000880080003900390000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000001ff0249033f025a02cc0289026f0237000000000000027a009400c0
03d203a7004c004c00c000d600be00000000000000000000000000000000
0000008101f901f9007400e500b900ca019502c600ac00a7008500880091
009800a500ac006f0087008f009b00a00000000000000000000000000000
0000068a051104f200000000000000000000000000b800ad009a006c00db
00cb00c400a0009a006c0000009700910000007d000a001a001f05600000
0000000000aa00a200000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000045e02b50094
009402cd034202bc02b0032f020403bc0191061405fa0304006000600059
007d004c008f0066004b008700a600a800bc007d00000000008c00b200b2
008e00a40000000000710071009a00f8008302aa004c00750075039c0331
00a400bc003d0062017b01080087003900b6019e00e2005a005a007000af
00e201c300b90071007104bc0068009000bc04da071807ec005f0051005f
00aa01b704b605d5007e006d007e00c4006d40658574737271706f6e6d6c
6b6a6968676665625f5e5d5c5b5a59585554535251504f4e585756555448
3c3b3a393837363534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c01b0184358b119072b1b212121592d2c01b0184358b11a072b1b2121
21592d2c01b0184358b0032510f221b000121b212121592d2c01b0184358
b11b072b1b212121592d2c01b0184358b11c072b1b212121592d2c01b018
4358b11d072b1b212121592d2c01b0184358b11e072b1b212121592d2c4e
b00014b046234344b0032510b10046e6b00013b00114b00010f221b00113
4db000122d2c01b018435845646a234569b01943646060b0462344231020
b046f02fb000121b21212121592d2c01b10b0a432343650a2d2c00b10a0b
4323430b2d2c00b0462370b101463e01b0462370b10246453ab10200080d
2d2cb0122bb0022545b00225456ab0408b60b0022523442121212d2cb013
2bb0022545b00225456ab8ffc08c60b0022523442121212d2cb000b0122b
2121212d2cb000b0132b2121212d2c01b00643b00743650a2d2c2069b040
61b0008b20b12cc08a8cb8100062602b0c642364615c58b00361592d2cb1
00032545685458b0032545b0032545606820b004252344b0042523441bb0
0325204568208a2344b00325456860b003252344592d2cb0032520456820
8a2344b00325456860b0032523442d2cb01643588721c01bb01243588745
b0112bb0472344b0477ae41b038a45186920b04723448a8a8720b0a05158
b0112bb0472344b0477ae41b21b0477ae4595959182d2c208a4523456860
442d2c456a422d2c01182f2d2c21212d2c01b0022545b002254564606ab0
0325456a6120b00425456a208a8b65b0042523448cb00325234421212d2c
01456823456961b00325456a6120b00425456a208a8b65b0042523448cb0
0325234421212d2c018a8a45642345646164422d2c01b0022543b04054b0
022543b000545a58b003252045b040614459b0022543b00054b0022543b0
40545a58b004252045b040604459212121212d2c014b525843b002254523
61441b2121592d2c014b525843b00225452360441b2121592d2c4b525845
441b2121592d2c0120b003252349b04060b0206320b000525823b0022538
23b002256538008a63381b212121212159012d2c4b505845441b2121592d
2c01b005251023208af500b0016023edec2d2c01b005251023208af500b0
016123edec2d2c01b0062510f500edec2d2c462346608a8a462320468a60
8a61b8ff8062232010238ab14b4b8a70456020b0005058b00161b8ffba8b
1bb0468c59b0106068013a2d2c2045b003254652583f1b2111592d2c2045
b003254650583f1b2111592d2c00b00743b006430b2d2c4b5258b00425b0
042549b00425b00425496120b0005458212043b0005558591bb040545820
43b0005458591b2043b00054581bb00325b8ffc03859595959212121212d
2c4b52584365381b2121592d2c4b525843381b2121592d2c21210c642364
8bb84000622d2c21b08051580c6423648bb82000621bb200402f2b59b002
602d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c
6423648bb84000626023212d2cb4000100000015b00826b00826b00826b0
08260f10161345683ab001162d2cb4000100000015b00826b00826b00826
b008260f1016134568653ab001162d2cb0134358031b02592d2cb0134358
021b03592d2cb00a2b2310203cb0172b2d2cb0282b8a102320d023b0102b
b00558c01b3c59201011b00012012d2c4b53234b515a5820458a60441b21
21592d2c4b53234b515a58381b2121592d2c20b003254523452361688a20
4568208a234460442d2c20b003254523452361688a204568208a23446044
2d2c4b5358b00425b00425496423456469b0408b6120b080626ab00225b0
0225618cb0462344218a10b046f6211b218a11231220392f592d2cb00243
54584b53234b515a58381b2121591b21212121592d2cb0024350584b5323
4b515a58381b2121591b21212121592d2c4b53234b515a58381b2121592d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259b12401885158b920000040885458b2020202436042b12401885458
b2022002436042004b014b5258b2020802436042591bb940000080885458
b202040243604259b94000008063b80100885458b202080243604259b940
00010063b80200885458b202100243604259b12601885158b94000020063
b80400885458b202400243604259b94000040063b80800885458b2028002
43604259b12801885158b94000080063b81000885458ba00020100000243
604259595959595959b10002435458400a0540084009400c020d021bb101
02435458b2054008ba010000090100b30c010d011bb18002435258b20540
08b80180b109401bb2054008ba01800009014059b9400000808855b94000
020063b8040088555a58b30c000d011bb30c000d0159595942424242422d
2cb0024354580c028a4b53b004264b515a580a381b0a2121591b21212121
592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b212121
21592d2c20b0024354b00123b05f237821b1000243b056237921b0024323
b020205c58212121b100471c598a8a208a208a23b81000635658b8100063
5658212121b1012c1c591b2159b08062205c58212121b1001b1c5923b080
62205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b0024354b0
0123b07b237821b1000243b072237921b10002438ab020205c58212121b0
631c598a8a208a208a23b81000635658b81000635658b00426b0015bb004
26b00426b004261b21212121b13600231c591b2159b0042623b08062205c
588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59b004
26b00161b8ff981c23212d2c2320b000508a8a64b10003255458b0401bb1
0103255458b005438b59b04f2b5923b0622b2321235865592d2cb108000c
215460432d2c014623466023466123201020468a61b8ff80628ab140408a
704560683a2d2c208a2349648a2353583c1b21592d2c4b52587d1b7a592d
2cb012004b014b54422d2cb1020042b123018851b1400188535a58b91000
0020885458b202010243604259b12401885158b920000040885458b20202
02436042b12401885458b2022002436042004b014b5258b2020802436042
591bb940000080885458b202040243604259b94000008063b80100885458
b202080243604259b94000010063b80200885458b202100243604259b126
01885158b94000020063b80400885458b202400243604259b94000040063
b80800885458b202800243604259b12801885158b94000080063b8100088
5458ba00020100000243604259595959595959b10002435458400a054008
4009400c020d021bb10102435458b2054008ba010000090100b30c010d01
1bb18002435258b2054008b80180b109401bb901000002435258b2054008
ba0180000901401bb901800002435258b2054008b80200b109401bb20540
08ba010000090100595959b9400000808855b94000020063b8040088555a
58b30c000d011bb30c000d0159595942424242422d2c451868234b515823
20452064b04050587c59688a6059442d2cb00016b00225b0022501b00123
3e00b002233eb10102060cb00a236542b00b234201b001233f00b002233f
b10102060cb006236542b0072342b00116012d2c20b82000628a6023622d
2cb0072558001b0159b0042510b00325b0022520b8ffff545821cd1bed59
21b006255cb006255a58b0092b5920b005254ab0042547b004254760b006
2547b0806361b00225b0005558b00325b00725496359b0082558001b0159
b00425b0062549b009255cb009255a58b0092b59b0072546b0806361b003
2520b0005558631b2159612320b0005558b080631b21b08059b0592bb006
255c586959b00425202010b00048233ab0062658001b0159b0052658b003
252f598a12233221212d2cb00625b00a2587b00625b009254ab0005358b0
0625b00a251bb00925b0072559b00225b00225070cb005256323b0062563
6020b94000040063535821b00426b00426b00a1bb94000040063655158b0
042665b0042665b00a1bb00426b00426b000b00325b003250b0d0ab0092e
b00725b007250b0d0ab00b2eb00525b0052507595920b0005558b00525b0
052587b00725b007250bb0092510b00b25b0092620b8ffff545821cd1bed
59b00525b0052507b00825b00b254923b00625b0062587b00a2510b00b25
c15920b00051b800522378b00161b00225b00725b0072507b00a25b00d25
4961b08062b00525b005250bb00a252338b00625b0062587b00825b00825
0bb00a2510b00b25c4b00625b0062507b00925b00c2549b0032554b8ffa7
23792121212121212121212121212d2c23b0005458b9400000001bb90000
4000598ab0005458b9400000001bb90000400059b05b2b2d2c08b0005458
b9400000001bb900004000590db05b2b2d2c8a8a080d8ab0005458b94000
00001bb90000400059b05b2b2d2cb00426b00426080db00426b00426080d
b05b2b2d2cb0022563b0206066b00225b82000626023622d2c234ab1024e
2b2d2c234ab1014e2b2d2c238a4a234564b0022564b002256164b0034352
5821206459b1024e2b23b000505865592d2c238a4a234564b0022564b002
256164b00343525821206459b1014e2b23b000505865592d2c20b003254a
b1024e2b8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258a
b0672b8a103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b00325
4660b004252eb00425b00425b0042620b000505821b06a1bb06c592bb003
2546b00325466061b08062208a2010233a232010233a2d2cb0032547b003
254760b0052547b0806361b00225b00625496323b005254ab08063205862
1b2159b0042646608a468a4660b02063612d2cb00426b00425b00425b004
26b06e2b208a2010233a232010233a2d2c2320b001545821b00225b1024e
2bb0805020605920606020b001515821211b20b005515821206661b04023
61b100032550b00325b00325505a5820b00325618a535821b000591b2159
1bb00754582066616523211b2121b000595959b1024e2b2d2cb00225b004
254ab0005358b0001b8a8a238ab00159b004254620666120b00526b00626
49b00526b00526b0702b236165b02060206661b02061652d2cb002254620
8a20b000505821b1024e2b1b452321596165b00225103b2d2cb0042620b8
02006220b80200638a236120b05d602bb00525118a128a20398a58ba005d
10000004266356602b23212010204620b1024e2b23611b2321208a201049
b1024e2b593b2d2cba005d10000009256356602bb00525b00525b00526b0
6d2bb15d0725602bb00525b00525b00525b00525b06f2bba005d10000008
266356602b20b0005258b0502bb00525b00525b00725b00725b00525b071
2bb0021738b00052b00225b001525a58b00425b0062549b00325b0052549
6020b0405258211bb000525820b0025458b00425b00425b00725b0072549
b00217381bb00425b00425b00425b0062549b00217385959595959212121
21212d2cb12501885058b94000020063b8040088545cb0124b525b1bb001
592d000100000006e6664e2ccae85f0f3cf5001b080000000000aec0ba1c
00000000d16faa78fb34fca60ed108460000000900020001000000000001
00000801fe5900000f17fb34fa7a0ed10001000000000000000000000000
000000290800010002800000045e0053045e00e2045e006d045e0061045e
0028045e007c045e0055045e0063045e004a045e004304acffff01d4007f
06b800880436003b04ce0042045800390392004302ad00150310006c0310
004a0557009704760080026c00be028c001d02e200880433003a04760088
047d009703b1003b0476008804b7009704ccfff604f70097046900970475
004d042c009703f6000a05a90042053f0085000000000000004000000040
000001f8000002e80000040c000005d8000006fc0000088000000a8c0000
0b3800000d6400000f6c000010a0000012ac000015cc0000185800001a10
00001c3000001f10000020600000210c000021cc0000237c0000258c0000
25dc0000274c000028a000002b6000002d6c00002e580000303400003240
0000348800003630000037c40000393000003b9800003c7800003e100000
3ff8000041ac00010000002902b500180083000800020010004000860000
03eb02c300050002b154004112017d00010010017d0040017d0090017d00
03003f0175005f0175005f017600030040016fb3282d3640b8016fb2171b
36b80171b3033a2190411a01710001003001710050017100700171009f01
7100bf017100df01710006000f0171003f0171005f0171007f01710004ff
c00153b21c1d36b9ffc00163b2121336b9ffc0014eb2333436b9ffc0014e
b2242636b8014eb33c161f0fbd015b00ef015b00020040015ab3191a3640
b8015ab315153640b8015ab2101036b9ffc00159b3090a3640b80170b328
2d3640b80170b2171b36b9ffc0015db2151b36b9ffc00162b2141536b9ff
c00162b21c1d36b9ffc00152b21c1d36b9ffc00167b22f3636b9ffc00167
b20e2636b9ffc00166b2090d36b9ffc00161b2090d36b9ffc00165b23336
36b9ffc00165b2282a36b9ffc00165b21d2036b80165b21a191fb9ffc001
61b24f5136b9ffc00161b23e3f36b9ffc00161b2191d36b9ffc00161b313
153640b80161b30b0d3640b8015fb2283236b9ffc0014fb2565a36b9ffc0
014fb3393b36304116014f0040014f0050014f00030070014f0080014f00
020000016400100164000200d0016400e0016400020164b270641fb9ffc0
0146b2131436b9ffc00146b2161636b9ffc00146b2090a36b9ffc00142b2
111336b9ffc40142b20a0e36b9ffc0013eb2171836b9ffc0013db20b1836
b90130012f400b321fe7e8641fe8d2301f20bc01390030013900020139b2
03181f410a013b01320010001f01370132000d001f01350132b2141f2f41
0c0132000101360133000e001f013401330014001f01310133b2101f40ba
013800900138404e020fe32fe302b0d901a0d90190d901d0d901c0d901b0
d901b0d301a0d30190d301d0d301c0d301b0d301d1d73f1fd6d71a1f80d5
01d5d71a1f1fd70170d701cac92a1fcac93938ca010bc844c802b8ffc0b6
dc0911364fd201b8ffc0401fb229323610b220b240b250b270b280b2a0b2
b0b2d0b2e0b20ac0b2f0b20285b8ffeeb3b4254836b8ffe0b3b4102336b8
ffee400eb4090f36b41a481fd06e01e07101b8ffc0400998090a36407109
1136b8ffc1400970121536406f131536b8ffc0401a6e0912367099014067
090f3670668066a066b06604af65bf6502b8ffc0402a640911366f937f93
026f9001708e017f8c9f8c0280a00100625062c062034061706102105b20
5b905b03b8017440b914321f6814481fb314481f2d14111f2c14251f2b14
391f2a14131fdf28ef2802cf28df28ef28032814101f9e20431f1f141e1f
2120431f20143c1f9f1a521f1a1b471f1b1a3c1f1a14321f1514391f1314
411f12141a1f11141a1f70140140144143360006010f01010f012f013f01
6f017f01af01bf01cf01ef01ff010a0f00010f002f003f006f007f00af00
bf00cf00ef00ff000a0a09371f0f020f0302cf02cf03ff02ff03040c0d39
0504390302390100390350500501b801ff01b0124b004b5442b013014b00
4b5342b116322b4bb0645242858d8d1d42b0964b5258b20380801d4259b8
08004b5458b001b0018e59b0084b5358b001b0018e59002b2b2b2b73742b
73747374b00345b006456861b006234473b00345b00e456861b00e2344b0
0e45b00f456861b00f234401b0144568b01423442b732b2b2b2b2b2b2b2b
2b2b2b2b2b73742b2b2b2b2b2b2b73737373737373732b73732b732b2b2b
2b2b73742b2b2b2b002b58b8ffc04044b51718361f44010f561f56024f55
5f550238bf2a1f6fbf019fbfafbf0237b9151f2fbb01bcbe171fbdbe161f
bebd151fbab9521fb6b9291fb7b9321fb8b9321fb935391fb80173403a3f
321f3c3f321f3d3f3d1f3e3f211f433f1d1f423f521f413f521f403f521f
3f35321f3233641f3335341f3534541f34351e1fd034e034f03403752b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b742b73742b7373742b1b40
0c02033b1f04053b1f0a083b1f2b2b2b5973742b01742b0073732b2b7374
2b732b2b73737374747473737374747473732b2b2b732b2b2b2b732b2b2b
2b2b2b2b2b2b2b2b737474752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b73002b2b2b2b2bb801714568b8017123447374752b2b
2b7373742b0000>
[16377 437 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

1 0 1 <> XCNAAA+CairoFont-0-0 AddT42Char 
1 64 2 <00020053ffe1040b05ef000b0023013fb0852b58401534013b0b45014a0b
7a11053a1535214a1545210409b8fff040130e0f003b03100e0f003b15b9
090221b9030a0fbbfff4000b000b01404009560f2110007f000200b8ffd4
b40d0d023b00b8fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe0b40c0c
063b00b8ffe0b40d0d063b00b8fffcb40b0b063b004110ffe8000d000d01
4000560000ffee000c000c014000560000ffe8000b000b0140b65600001b
0c0b0bb80140400c561b21a006c00602060c0d0db80140b456060c0c0cb8
0140b456060c0b0bb8014040205606100d0d023b06100c0c023b06160b0b
023b060c0d0d063b060c0c0c063b06b8ffe2b40b0b063b06b8ffc0b30d11
37062f2b2b2b2b2b2b2b2b2b2b5ded2b332f2b2b2b2b2b2b2b2b2b5ded2b
003fed3fed2b2b5d31305d1b400c0915b96c09020321b96c030a00183f2b
3f2b30315901100223220211101233321201363635342627262623220607
0606151416171616333236040be9f3f6e6e9f3f6e6ff001d18181e1e6954
536b1f1e1613201d6b56536b02e9fe6ffe89017e018801930175fe7efcb6
4ae29a99e24b4c4f4f4e4ce8929cd2534d534f00>XCNAAA+CairoFont-0-0 AddT42Char 
1 0 0 <00020100000007000600000300070014b706020400060204002fcdddcd00
2fcdddcd3130211121112521112101000600fa800500fb000600fa008005
00000000>XCNAAA+CairoFont-0-0 AddT42Char 
XCNAAA+CairoFont-0-0 /CharStrings get begin
/g1 1 def
/g2 2 def
end
XCNAAA+CairoFont-0-0 /Encoding get
dup 1 /g1 put
dup 2 /g2 put
pop
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0 /XCNAAA+CairoFont-0-0 findfont ct_VMDictPut
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 253{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
23.3594 192.824 mo
(\001\002)
[2.49597 0 ]xsh
34.648 180.25 mo
38.602 180.25 li
@
203.25 180.25 mo
199.301 180.25 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 504 3 <000100e2000003b805d6000c00bcb0852b58401a05b6060609030b03b801
082f0001af000100050100090b020d0db80140b4560b0c0c0cb80140b456
0b0c0b0bb801404010560b080c0c023b0b2001200380030203b8ffeeb40d
0d023b03b8fffe400b0c0c023b030c0b0b023b03b8fff4b40c0c063b03b8
fff4400e0d0d063b030c0b0b063b03030e0d1112392f2b2b2b2b2b2b5d33
ed2b2b2b2b39322f332f5d71003ffd3c3f332fed31301b400f0605b66c06
0609030b0103b86c010800183f2bc43f332f2b3031592121352111213532
363733112103b8fd2a010efef29991099b01089803e6885779fac2000000
>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g3 3 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 3 /g3 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 252{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 183.426 mo
(\001\003\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 170.852 mo
38.602 170.852 li
@
203.25 170.852 mo
199.301 170.852 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 744 4 <0001006d0000040405f0002600a9b0852b5840331a2225172b1f2b213c05
361739234c054617492354175a215b226517601b7417771b7b207f221314
140eba19020225ba010825b8ffc0b50b1037262608bbfff4000b000b0140
401b5608213f1c4f1c021c1a0c0c023b1c1625161c032f0201c0020102b8
ffc0b30a0d37022f2b5d7117332f2f2b5ded2b332f2b003ffd323fed332f
31305d1b400f1414190eba6c1902020125ba6c010800183f2b323f2b332f
303159212135363637363635342627262623220607060607233536363332
1615140607060607060607210404fc6963b054aa7c2722235c37356d322a
4e180b3edd63d0ec292425683a5ee74502dcd15eac5dbbe1783e5e1f1e1e
1b14113011d41f3bddbd57943f41803e66dc40000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g4 4 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 4 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 251{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 174.023 mo
(\001\004\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 161.5 mo
38.602 161.5 li
@
203.25 161.5 mo
199.301 161.5 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 1036 5 <00010061ffe103ea05f00040010fb0852b58405b160e2609291529233609
32123a23342d353a450944124a23442d443a55095a165a23552c5c31533a
6309600e630f641969237509700e710f79231d15143635b9603801383821
0b070700ba0b02252529ba210a363b080d0d063b3bbbfff4000b000b0140
400a563b211136141103242fbbfff4000b000b0140400f562f213f1b801b
021b160c0c023b1bb8fff4b40b0b023b1bb8fff8400c0d0d063b1b081b08
60240124b8ffc0b30b0d37242f2b5d33332f2f2b2b2b5ded2b1217392fed
2b2b2f003fed332f3fed332f1112392f5ded12393931305d1b401b151436
3835b96c3838210b07070b00ba6c0b0225252129ba6c210a00183f2b332f
3f2b332f1112392f2b123939303159012206070606072335363633321617
161615140607151616171616151406070606232226273533161633323637
363635342627262623233533323635342627262601ff366c3430471c0c41
df6565973d4243a2712f6b2e2e3a453f41b87570dc4b0e3fd46a3d7b2928
2a2f2a2a7343554287a92c22265c05431a15142c13d32339292b30885b7b
ba190e092c2b2b876165a94144463626d32e54272c2c6a5151681e1e17a6
807a3851181a14000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g5 5 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 5 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 250{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 164.676 mo
(\001\005\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 152.102 mo
38.602 152.102 li
@
203.25 152.102 mo
199.301 152.102 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 1496 6 <000200280000042b05d1000a000d00e6b0852b58bc000cfff4000c000c01
40b4560d0c0c0cb80140401e560c0d0d370607140606070c0607090db901
01040403070303080004070c4113fff4000c000c01400056000cfff4000b
000b01400056000cfffe000d000d01400056000cfff8400c0c0c023b0c20
010020080108b8ffdeb40d0d023b08b8fff2b40c0c023b08b8ffe0b40c0c
063b08b8ffe6b70d0d063b08080d062f33332f2b2b2b2b5d333cfd2b2b2b
2b393c2f003f3f12392f3c10fd3c11393987052e2b047d10c43130052b04
2b1b40100c060709010db96c010404030703030800183f3f12392fc42bc4
1239393031590123112311213501331133211101042bb1c0fd6e029ab8b1
fe8ffe0a0200fe000200d202fffccf0246fdba000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g6 6 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 6 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 249{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 155.273 mo
(\001\006\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 142.699 mo
38.602 142.699 li
@
203.25 142.699 mo
199.301 142.699 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 1788 7 <0001007cffe103f305d1002d00f7b0852b58402d2a083a08361439194a08
43144a195a0854145a196a087a080c20201db928280624ba21030a0a11ba
060a232317bbfff4000b000b0140b65617213f000100b8fff0400b0d0d02
3b000c0c0c023b00b8fff4b40b0b023b00b8fff440090b0b063b0025040c
0cb80140b456250c0b0bb80140b45625020d0db80140b356252020b8ffee
b40d0d023b20b8fff8400b0c0c023b20002060090109b8ffc0b3090d3709
2f2b5d33332f2b2bed2b2b2b2f2b2b2b2b5ded2b332f003fed332f3fed12
392ffd322f31305d1b40172020281db96c2828062124ba6c21030a0a0611
ba6c060a00183f2b332f3f2b12392f2b322f303159011406070606232226
273533161617161633323637363635342627262623220607112115211136
3633321617161603f3453e3fbb746bcf4c0e1756343b623d3c722925272b
292b7d4d51a4310331fd9024461d729e494a4f01da6cb843444e2f26d311
2b1315172b302c76504f6621261f190b02ffaffe740404263738a800>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g7 7 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 7 /g7 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
248{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 145.875 mo
(\001\007\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 133.301 mo
38.602 133.301 li
@
203.25 133.301 mo
199.301 133.301 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 2176 8 <00020055ffe1041b05ed0025003a0158b0852b584040091c05231710191c
152339283234323a49284234443a5902571052235224642364247434121d
062cb92020061216161aba120238b9060a15180d0d063b151526bbfff400
0b000b0140b6562621100001004113fff0000c000c014000560000ffec00
0b000b014000560000ffe8000d000d014000560000ffd6b40d0d023b00b8
fff0b40c0c023b00b8ffd6b40b0b023b00b8ffe0400c0d0d063b001d2f00
320c0b0bb801404009563221a00cc00c020cb8ffc0b60c11370c0c0c0cb8
0140b4560c0c0b0bb80140b4560c0c0d0db801404014560c100d0d023b0c
100c0c023b0c160b0b023b0cb8ffe4400b0b0b063b0c0c0d0d063b0c2f2b
2b2b2b2b2b2b2b2b5ded2b3332322f2b2b2b2b2b2b2b5ded2b332f2b003f
ed3ffd322f1112392fed123931305d1b40181d06202cb96c202006121616
121aba6c12020638b96c060a00183f2b3f2b322f1112392f2b1239303159
011406070606232226272602353412373624333216171523262623220607
363633321617161607342627262623220607060615141617161633323604
1b4c4043a66465a53f4d575053510100a8325621091b663abae515479659
5783475250cb303627633446844002023d2d2b5b35789501e373c2414547
444351010fc6c2013974717f0a0bbf0f19fbf7323623353ebe885c7c2c20
142a2816291f9bbe312f26ac0000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g8 8 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 8 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 247{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 136.477 mo
(\001\010\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 123.898 mo
38.602 123.898 li
@
203.25 123.898 mo
199.301 123.898 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 2700 9 <000100630000041405d100060083b0852b58410b0003fffe000b000b0140
00560002fffe000b000b0140403056030001019e020314020203000203ba
050302080301002b02740202020204100001000020043004400460048004
05042f5d332f5d12392f5d123939003f3ffd1139313087052e2b877dc405
2b2b1b400a00020503ba6c0503020800183f3f2b11393031590101230121
35210414fd7cd502aafcfe03b104f2fb0e0522af0000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g9 9 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 9 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 246{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 127.074 mo
(\001\011\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 114.551 mo
38.602 114.551 li
@
203.25 114.551 mo
199.301 114.551 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 2872 10 <0003004affde041405f3000e001d003a0177b0852b58b6150c0c0d063b0c
b8fff4b40c0d063b0bb8fff4b40c0d063b0ab8fff4b40c0d063b09b8fff4
40540c0d063b2a113008300e301932324008400e4019423259015a055408
5f115a125f175419541d532953335d37640a65176c216026632c63306436
69397c12762c73301f27150c350912061e03b72e021bb81e0a00bbfff400
0b000b0140400a56002031313815282b0fbbfff4000b000b01404009560f
21340c10380138b8ffe0b40d0d023b38b8ffd2b40b0b023b38b8ffe0b50d
0d063b3806b8fff4b40d0d023b06b8fffeb70d0d063b060c0b0bb8014040
0a5606212b382b180c0b0bb801404009561821a024c0240224b8ffc04016
0e113724100d0d023b240c0c0c023b24160b0b023b24b8ffe0400b0b0b06
3b240c0d0d063b242f2b2b2b2b2b2b5ded2b33332fed2b2b2b2f2b2b2b5d
3939ed2b11393911332fed2b003fed3fed12173931305d2b2b2b2b2b1b40
1427150c350912061e2e03b76c2e021e1bb86c1e0a00183f2b3f2b121739
303159013426232206151416171616173636133426272626270606151416
333236012226272626353436373526263534363332161514060715161615
1400032b86776d8b47471f7f34573e1c48672271475358a37b7e98fee86f
b6403f41817b6e6afec3cbf5756e8286feeb0476648678664a6629113c11
438dfd715c6c38132c1e37a16787b097fed4423e3ca55c79cb3c06409872
a8e0d5a664c437063dae89bffefe0000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g10 10 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 10 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 245{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 117.727 mo
(\001\012\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 105.148 mo
38.602 105.148 li
@
203.25 105.148 mo
199.301 105.148 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 3428 11 <00020043ffe3040905ef0014003a0154b0852b58403b04310a3816311a38
29253d023d08350b4d024b08450b541758255a385b396b386c397a027022
13321b0fb935352706b91b022b2b2fba270a321200bbfff4000b000b0140
b6560021102101214113fff0000c000c014000560021ffec000b000b0140
00560021ffe8000d000d014000560021ffd6b40d0d023b21b8fff0b40c0c
023b21b8ffd6b40b0b023b21b8ffe0b50d0d063b212ab8ffe0400b0d0d06
3b2a212a090c0b0bb80140401056092170158015a015c01504150c0c0cb8
0140b456150c0b0bb80140b456150c0d0db8014040145615160d0d023b15
160c0c023b15160b0b023b15b8ffe4400b0b0b063b15100d0d063b152f2b
2b2b2b2b2b2b2b5ded2b33332f2b2f2b2b2b2b2b2b2b5dfd2b3232003ffd
322f3fed12392fed123931305d1b4017321b350fb96c3535271b06b96c1b
022b2b272fba6c270a00183f2b322f3f2b12392f2b123930315901342627
262623220615141617161633323637363625343637363633321617161215
14020706062322262735331616333212370606232226272626034038312c
5a367b9230362660374094370103fd034b413eb35c67a73d4d55535156f1
b1285a270a196a37c4e00f5091555388455052036d98bf343024b0a75e7a
2c1f152d250f319e73be45424a454152fef6cbb9feb56d747a090cbf0e1a
0102f0363224343dbb00>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g11 11 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 11 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 244{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
14.625 108.324 mo
(\001\013\002\002)
[2.49597 4.35999 4.35999 0 ]xsh
34.648 95.75 mo
38.602 95.75 li
@
203.25 95.75 mo
199.301 95.75 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
10.2578 98.9258 mo
(\001\003\002\002\002)
[2.49597 4.35998 4.35999 4.35999 0 ]xsh
34.648 189.648 mo
34.648 185.699 li
@
34.648 95.75 mo
34.648 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
32.4414 202.773 mo
(\003)sh
51.5 189.648 mo
51.5 185.699 li
@
51.5 95.75 mo
51.5 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
49.293 202.773 mo
(\004)sh
68.352 189.648 mo
68.352 185.699 li
@
68.352 95.75 mo
68.352 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
66.1406 202.773 mo
(\005)sh
85.25 189.648 mo
85.25 185.699 li
@
85.25 95.75 mo
85.25 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
83.043 202.773 mo
(\006)sh
102.102 189.648 mo
102.102 185.699 li
@
102.102 95.75 mo
102.102 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
99.8906 202.773 mo
(\007)sh
118.949 189.648 mo
118.949 185.699 li
@
118.949 95.75 mo
118.949 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
116.742 202.773 mo
(\010)sh
135.801 189.648 mo
135.801 185.699 li
@
135.801 95.75 mo
135.801 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
133.59 202.773 mo
(\011)sh
152.648 189.648 mo
152.648 185.699 li
@
152.648 95.75 mo
152.648 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
150.441 202.773 mo
(\012)sh
169.551 189.648 mo
169.551 185.699 li
@
169.551 95.75 mo
169.551 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
167.34 202.773 mo
(\013)sh
186.398 189.648 mo
186.398 185.699 li
@
186.398 95.75 mo
186.398 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
182.008 202.773 mo
(\003\002)
[4.35999 0 ]xsh
203.25 189.648 mo
203.25 185.699 li
@
203.25 95.75 mo
203.25 99.699 li
@
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
198.859 202.773 mo
(\003\003)
[4.35999 0 ]xsh
34.648 95.75 mo
34.648 189.648 li
203.25 189.648 li
203.25 95.75 li
34.648 95.75 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 3948 12 <0001ffff000004ad05d10007010eb0852b58b306060b0bb80140b4560706
0b0b411a014000560001fffe000c000d014000560000fffe000c000d0140
00560001fffa000b000b014000560000fffa000b000b01400056b1060243
5458400b0601350303000805070200b8fff4b41010063b00b8fff4400b0f
0f063b00200c0c063b00b8ffe9b40d0d063b00b8ffd4b70b0b063b000009
081112392f2b2b2b2b2bc6ddc6003f3ffdc031301b401c06013503030008
0f093f0902055b0714025b100020009000a0000400b8fffc400b0c0c023b
000c0b0b023b00b8ffee400d0d0d023b000009086f097f09025d1112392f
2b2b2b5de4fde45d003f3ffd32313059012b2b2b2b2b2b1b400906030135
6c0303000800183f3f2b32303159211121352115211101f3fe0c04aefe0c
0521b0b0fadf0000>PEUMUK+CairoFont-0-0 AddT42Char 
1 4256 13 <0002007f0000015505db0003000701e7b0852b58b306040c0cb80140b456
05040c0cb80140b456030c0c0cb80140b456000c0c0c410d014000560002
fffa000d000d014000560001fffa000d000d0140b45607060b0bb80140b4
5604060b0bb80140b45603060b0bb80140b45600060b0b411a0140005600
06fffa000b000b014000560005fffa000b000b014000560002fffa000b00
0b014000560001fffa000b000b01400056b1060243545840090544060302
05010804b8fffc40260b0b063b040005021010063b050a0f0f063b05040d
0d063b05060c0c063b05040b0b063b0500b8fff2b40f0f063b00b8fff8b5
0c0c063b0001b8fff440171010063b01080f0f063b01040d0d063b010c0c
0c063b01b8ffd2b70b0b063b010109081112392f2b2b2b2b2bcd2b2bc62b
2b2b2b2b10c62b003f3f3fed31301b4009054406030205010804b8fffab4
0f10023b04b8fffa40260c0c023b049f05020f10023b05040c0c023b0560
00080c0c023b001a4f01b001c001d0010401b8ffc0b3090f3701b8fffcb4
1010023b01b8fffe401e0f0f023b01020d0d023b01060c0c023b01040b0b
023b010109084f090109b8ffc0b20b0f372b5d1112392f2b2b2b2b2b2b5d
ed2bf42b2bed2b2b003f3f3fed313059012b2b2b2b2b2b2b2b2b2b2b2b2b
2b1b400a0605446c06030205010800183f3f3f2b30315921231133372335
330148bcbc0dd6d6045dbbc30000>PEUMUK+CairoFont-0-0 AddT42Char 
1 4780 14 <0001008800000638047c002e0293b0852b58b1060243545840181e210a24
16074227164221270421041c0600080f081b082eb8fffcb60c0c063b2e00
0eb8fffcb60c0c063b0e0f1ab8fffcb60c0c063b1a1b00b8ffe8400b1010
063b00080f0f063b00b8fffe400b0d0d063b002a0c0c063b00b8ffd2b70b
0b063b00002f0fb8fff440111010063b0f040d0d063b0f180c0c063b0fb8
ffd0b70b0b063b0f0f2f1bb8fffeb41010063b1bb8fff440110f0f063b1b
060d0d063b1b020c0c063b1bb8ffccb70b0b063b1b1b302f1112392f2b2b
2b2b2b11392f2b2b2b2b11392f2b2b2b2b2b10cd2b10cd2b10cd2b003f3f
3f3f3f3f10ed10ed113333123931301b402a30400c0c023b0523052a1523
152a2623262a391f070a2427191e0716422721041c05000f1b082d0c0b0c
b80140b4562d060d0db80140400a562d080c0c023b2d1a00410afff4000c
000c014000560000fff4000d000d0140b75600160f0f023b00b8fffc400b
0d0d023b000c0c0c023b00b8ffea400d0b0b023b00970a241a0e0c0b0cb8
0140b4560e060d0db80140400a560e080c0c023b0e1a0fb8fffa40171010
023b0f160f0f023b0f020d0d023b0f180c0c023b0fbbfff4000b000b0140
b6560f1e1a0c0b0cb80140b4561a060d0db80140400d561a080c0c023b1a
1a1b060b0bb80140b4561b0c0c0cb80140b4561b0c0d0dbb01400056001b
fff4b41010023b1bb8fffe402c0f0f023b1b060d0d023b1b080c0c023b1b
060b0b023b1b97000f100f200f900fb00f050f0f302f20307f30025d1112
392f5df42b2b2b2b2b2b2b2bfd2b2b2b32102b2b2b2b2bed2b2b2b113939
f42b2b2b2b2b2bed2b2b2b003f3c3c3f3f3cfd3c333311333331305d012b
591b40140a2427191e21072116426c2721041c05000f1b0800183fc4c43f
3fc42bc41133331133333031592111342627262623220607161615112311
342627262623220607112311331536363332161736363332161716161511
057c0c13144a3f3a85470103bc0c13144a3f3d863fbcbc4a915763992855
a25f48762c2d3102864d832528264743112f20fd2102864d832528264c3b
fcbe045d7c4a515a675f622d32339873fd210000>PEUMUK+CairoFont-0-0 AddT42Char 
1 5580 15 <0002003bffe60400047c001e002b01fdb0852b58b1060243545840152b3c
0e0e00253d06042018011818113f0009191f0db8fff4b41010063b0db8ff
eab40f0f063b0db8ffeab40d0d063b0db8ffe0b40c0c063b0db8ffd6400a
0b0b063b0d0d2d2c2b0eb8fff8401e0f0f063b0e03101010063b03160f0f
063b03120d0d063b031e0c0c063b03b8ffdcb70b0b063b03032d2c111239
2f2b2b2b2b2bdd2bc01112392f2b2b2b2b2bcdc6003fed332f5d3fed1239
2fed31301b40212d400c0c023b250f2d1a340f450f59229904aa04072518
0c0d3719300c0f003b06b8fff8b60f10003b2b3c0eb8ffc0b61213370e0e
0025bbffea000c000d0140401256253d0604181819113f0009670c011919
1f410afffa000d000d01400056001ffff4000b000c0140b3561f1a0cbeff
ea000d000d01400056000cffe4b41010023b0cb8ffe6400f0d0d023b0c71
2d3f2d012b0e0c0b0bb80140b4560e020d0db80140b4560e0c0c0cb80140
400d560e100c0c023b0e1a031c0c0cb80140b45603160d0db80140b45603
160b0bb8014040225603161010023b03160f0f023b031a0d0d023b031a0c
0c023b03200b0b023b03702c10f62b2b2b2b2b2b2b2bfd2b2b2b2b3c5d10
f62b2b2bed2b2b332f5d003fed33332f3fed2b12392f2bed2b2b2b31305d
012b59001b40160e2b3c6c0e0e0006253d6c060418181900113f6c000900
183f2b33332f3f2b12392f2b303159052000111000333216171616151521
141633323637363637331506060706061326262726262322060706060702
6dfef5fed9011ee768a03c3c40fcfac4ad3e77303346170b216227375998
02201e21674c4b692b2a2c061a012d0115011101433c4040b98666c3ce1c
16172b13cd0d270b0f1002c54c6e262a2c2d2b2c6b47>PEUMUK+CairoFont-0-0 AddT42Char 
1 6232 16 <00010042ffe504ac05ec00330118b0852b58403908040711083018041a16
142a2b16242a3a16332a4611482f5a025a04570a5711106e137f13021313
1a340c02602d702d022d2d2634000a132eb8ffc0b3091e372eb8ffcc4012
0b0b063b2e2e350f35010f351f355f350320b8fffab70d0d063b20020c0c
b80140b456200c0b0bb80140400a562015770601060c0b0bb80140b45606
160d0db80140b45606140c0cb80140402c5606160c0c023b06200b0b023b
06160d0d023b060e1010063b060e0f0f063b06160c0c063b06160d0d063b
06b8ffe0b60b0b063b06663410f42b2b2b2b2b2b2b2b2b2b2b5ded2b2b2b
5d5d11332f2b2b3c003fed332f5d3fed332f5d31305d1b401013130c1a34
6c0c022d2d0026346c000a00183f2b332f3f2b332f303159052226272602
353412373636333216171616171523262627262623220607060615141617
1616333236373636373315060607060602dd92f55959625f5b59f4974b83
38306531101a523b3986585faa403f464a403ea85e5692393750170f3157
3e416f1b6261610122bcbb011667646916110f2d1bef1844211f284e4c4c
e69099dd4c4a4b2a201f4117ec172a1415160000>PEUMUK+CairoFont-0-0 AddT42Char 
1 6672 17 <00020039ffe1041f047c000b001701c6b0852b58b10602435458400d153f
03080f3f09040c00120600b8fff0b41010063b00b8ffecb40f0f063b00b8
fff0b40d0d063b00b8ffe8b40c0c063b00b8ffd240200b0b063b00001806
101010063b06140f0f063b06120d0d063b06180c0c063b06b8ffe0b70b0b
063b060619181112392f2b2b2b2b2b11392f2b2b2b2b2b10cd10cd003fed
3fed31301b402619400f0f023b19400b0b023b3b0e341034143b164b0e44
1044144b16080f3f0904153f030a0c4110fff4000b000b01400056000cff
fe000d000d01400056000cfffc000c000c01404010560c1b00081010023b
00220f0f023b00b8ffe0b40d0d023b00b8fffa400b0c0c023b00100b0b02
3b004110fff4000b000b014000560000fff4000c000c014000560000ffea
000d000d0140400b560071191f190112020d0db80140b45612040c0cb801
40b456120c0b0bb80140402556121b06161010023b06160f0f023b061a0d
0d023b061a0c0c023b06200b0b023b061c0c0cb80140b45606160d0db801
40b45606160b0bb80140b35606701810f62b2b2b2b2b2b2b2bed2b2b2b5d
10f62b2b2b2b2b2b2b2bed2b2b2b003fed3fed3130015d2b2b591b400c09
0f3f6c090403153f6c030a00183f2b3f2b30315901100023220011100033
3200033426232206151416333236041ffef0e2e9fef50113e1e20110c29e
92939f9f93919f022efee6fecd013d011001180136fecbfee7d9d3d3d9d2
d9d50000>PEUMUK+CairoFont-0-0 AddT42Char 
1 7216 18 <00010043ffe5036b04780036023cb0852b58b10602435458401c31111a28
041d002121253e1d0404040b3e000920110e0d0d063b1131b8ffeab41010
063b31b8ffe6400b0f0f063b310e0d0d063b31b8ffd640230b0b063b3131
383703281a041010063b1a0c0f0f063b1a160d0d063b1a0c0c0c063b1ab8
ffe0b70b0b063b1a1a38371112392f2b2b2b2b2bcdc41112392f2b2b2b2b
cd2bc4003fed332f3fed332f1112173931301b407838400c0c023b38400b
0b023b0a18062f1a18152f26072923360739234a02451f59025918541f50
2f6902651f652d632f7902761f841f84231619141917291429173b143b17
06141717b42b2e142b2b2e752b8b2b8b2e032b2e171404001d9021012121
253e1d0404040b3e000903202b2e17140320061a114110fff4000c000c01
4000560011fffe000d000d014000560011fff4000b000b0140b356111b31
b8ffc0b309163731410dfff4000b000b014000560031fff0000d000d0140
00560031ffe0b41010023b31b8fff4b40f0f023b31b8ffee40110d0d023b
310c0b0b023b31313828020d0db80140b456280c0c0cb80140b456280c0b
0bb80140b356281b1ab8ffc0b60e15371a0c0b0bb80140b4561a100d0db8
0140401a561a120f0f023b1a120d0d023b1a160c0c023b1a120b0b023b1a
2f2b2b2b2b2b2b2bed2b2b2b11332f2b2b2b2b2b2b2bed2b2b2b1217392f
2f003fed332f3fed332f5d111217395d870e2e2b0e7d10c4007131305d01
2b2b591b40172b2e171404001d21211d253e6c1d040404000b3e6c000900
183f2b332f3f2b332f111217393031590522262735331616171616333236
373636353426272626272626353436333216171523262623220615141617
161617161615140607060601b670c3400a18413630733e2d6619231f495d
2474318074e4bd5dbc400a48b15a5d804c542a67397c7d39373c971b3c22
d3132e191622151017343443441709180e259b6e97be2e23c939424e4f46
45160b150e1f907c48812e3234000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 7952 19 <00010015ffea02aa059e001b00f7b0852b5840251d401010023b0120090b
3708080d043e0a07051818143f00093f1d0118000b100b200b030bb8fff4
b40c0c063b0bb8ffe0400a0b0b063b0b0b1d0a0d06b8ffe840090c0c063b
060d0c0b0cb80140b4560d060d0db801404019560d080c0c023b0d1a070f
061f062003030603261010023b03b8fffeb40f0f023b03b8fffeb40d0d02
3b03b8fff2400b0f0f063b030c0d0d063b03b8fffeb60b0b063b03981c10
f42b2b2b2b2b2b325d3ced2b2b2b2f2b103c11332f2b2b5d3c5d003ffd32
2f3f3cfd3c332f3130002b012b1b40130808070d07043e6c0a0705181800
143f6c000900183f2b322f3fc42bc411332f303159052226351123353311
3311211521111416171616333236373315060601da9aac7f7fbc015afea6
0614114c412e56130b356d16afbd026b9c0141febf9cfded555c2823231b
09a90f110000>PEUMUK+CairoFont-0-0 AddT42Char 
1 8288 20 <0001006cfe6402c606140015005ab0852b58403507400d103701400d1037
0710090a370110090a372803280548034805770d7711060701010c083000
70000200000f1f1004200402042f5ded332f5d3c003f3f3130015d2b2b2b
2b1bb30701010c00183f3f30315901232602111012373315060607060215
14121716161702c6e5aec7c5b0e551933f3c4b493e3c9a4dfe64cf01ce01
3b013401d5cf0a49bf7f7bfed8a4abfee4807bc74500>PEUMUK+CairoFont-0-0 AddT42Char 
1 8460 21 <0001004afe6402a406140015006db0852b58b90013ffc0b30d103703b8ff
c0402b0d103706030613150315132601260326132615470147157809780d
0c1201040c123f047f040204040b1f00b8ffce400a0b0b063b0000010000
1711332f5d2bed332f5d3c003f3f3130015d2b2b1bb31201040c00183f3f
3031590110020723353636373612353402272626273533161202a4c6afe5
4d9c3a3e494a3d3d9a4ce5aec7023cfecbfe2ccf0a45c97981011fa7a501
267c7cc6450acffe2e000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 8652 22 <00010097000004c005d100090182b0852b58404e0b400b0b023b7607010c
071b07240734074507500769026107790271070a0f0100061f0111062601
3406440653066b0160067c0170060c0c010406025a0155060201060d1106
3b010c0b0c063b06b8fff440110b11063b02070108060301040806010207
b8fffcb40c0c023b07b8fff4b40c0c063b07410afff2000c000c01400056
0007fff4000b000b0140400a56071300200f0f063b00b8fff0b41010063b
00b8fff640110c0c023b000e0b0b023b00160d0d023b00b8fffeb40c0c06
3b00b8fffeb40d0d063b00b8ffe6401c0b0b063b00650b0f0b400b020204
0c0c023b02040c0c063b020e0c0cb80140b456020c0b0bb80140b3560213
04b8fff0b41010063b04b8fffeb40d0d023b04b8fff840110f0f063b0402
0c0c063b040c0d0d063b04b8ffc6b60b0b063b04640a10f62b2b2b2b2b2b
ed2b2b2b2b5d10f62b2b2b2b2b2b2b2bfd2b2b2b2b113939003f3c3f3c12
39393130012b2b2b72715d005d5d012b1b40090207010806030104080018
3fc43fc41239393031592123011123112101113304c0defd6eb901190257
b90504fafc05d1fb65049b00>PEUMUK+CairoFont-0-0 AddT42Char 
1 9084 23 <00010080ffe103ee045d001901bbb0852b58b10602435458b90000fff4b4
0c0c063b19b8fff440120c0c063b18050c05010817021442050a1701b8ff
e6400b1010063b01020f0f063b01b8fffeb40d0d063b01b8fff4b40c0c06
3b01b8ffe0400a0b0b063b01011b1a0e0bb8fffa400b0f0f063b0b0c0d0d
063b0bb8ffcab70b0b063b0b0b1b1a1112392f2b2b2bcd1112392f2b2b2b
2b2bc0003fed33333f3f3f3130012b2b1bb9001bffc0401d1010023b0908
7d087909741604b80501180c05010817021442050a1701410dfff4000b00
0c014000560001fffa000d000d014000560001fff8b60c0c023b011a0041
0dfffa000b000b014000560000fff8000d000d014000560000ffdeb41010
023b00b8fffeb40f0f023b00b8ffeab40d0d023b00b8ffea400b0b0b023b
006f1b0e0c0b0bb80140b4560e060d0db80140b4560e0c0c0cb80140400d
560e080c0c023b0e1a0b060b0bb80140b4560b0c0d0dbb01400056000bff
f640191010023b0b060d0d023b0b040c0c023b0b060b0b023b0b6e1a10f6
2b2b2b2b2b2bed2b2b2b2b10f42b2b2b2b2b2bfd2b2b2b3c003fed33333f
3f3c5d31305d012b591b400d180c05010817020514426c050a00183f2b33
333f3fc43031592123350606232226272626351133111416171616333236
37113303eebc579c604981303035bc0d17174f4a459c41bc7c4c4f303434
9e7102d5fd8459752c2b284e390342000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 9612 24 <000100be000001ad011d00030038b0852b58400a025601082f0501002d01
b8ffe2400a0b0b063b6f017f0102012f5d2bed5d003fed31301bb4025640
010800183f1aed3031592123113301adefef011d>PEUMUK+CairoFont-0-0 AddT42Char 
1 9692 25 <0001001d000002d4061e00180123b0852b58b10602435458402118150000
043f15000b0e3e11080511050d080909000e08960b000f000f110b1a0eb8
fff640111010063b0e240f0f063b0e0c0c0c063b0eb8fff4b40b0b063b0e
2f2b2b2b2bedc033332f2f10e51112392f003f3f3f10fdc03fed322f1139
31301b402a08143914020000043f15000b0e3e0811050d080909000e0896
0b000f0f1f0f2f0f030f000f110b0c0b0cb80140b4560b060d0db8014040
17560b080c0c023b0b1a000e100e200e030e161010023b0eb8fffab40f0f
023b0eb8fffab40d0d023b0eb8fffeb40c0c023b0e2f2b2b2b2b5ded2b2b
2b3c33332f5d2f10e41112392f003f3f3cfd3c3ffd322f3130015d313059
1b4012000015043f6c15000b110e3e6c0811050d0800183f3fc42bc43f2b
322f30315901232626232206151521152111231123353335343633321617
02d40a195e2577650137fecfbc7f7fc2b5346429056009116b8c269cfc3f
03c19c25cad20b07>PEUMUK+CairoFont-0-0 AddT42Char 
1 10060 26 <00010088000002d8045d00120113b0852b58b30a020c0cb80140b4560902
0c0cb80140401c56000d100d200d300d040c090f00007f048f040204440a
0f05090800b8ffc0b30a123700b8ffc0400c0b0b063b0000140c070c0b0b
b80140b456070e0c0cb80140b45607060d0db80140b75607080c0c023b07
b8fffa400a0c0c063b071a09060b0bb80140b45609020c0cb80140b45609
080d0dbb014000560009fff040111010023b09020d0d023b09040b0b023b
09b8fffcb41010063b09b8fffe400b0f0f063b090c0c0c063b09b8ffcab6
0b0b063b096e1310f62b2b2b2b2b2b2b2b2b2bfd2b2b2b2b2b3c11332f2b
2b003f3f3cfd5d322f11123931305d012b2b1b400e0c090f00000f04446c
0a0f05090800183f3fc42b322f1112393031590123262623220607112311
331536363332161702d80a152f214c9643bcbc6799481d1d120393060342
41fce7045da65b4b0303>PEUMUK+CairoFont-0-0 AddT42Char 
1 10400 27 <0002003affe103b30478000c00360217b0852b58b10602435458b9000cff
eab40d0d063b00b8ffea400c0d0d063b00010d0a131f3d01b8ffc0401d0c
0c063b100101000101010113263f2e040a41133608130a35361f0036b8ff
f4400b0c0c063b360c0f0f063b36b8ffe040220b0b063b3636383707190c
1010063b190c0f0f063b190c0c0c063b19160d0d063b19b8ffdcb70b0b06
3b191938371112392f2b2b2b2b2bcd1112392f2b2b2bd0c010cd003f3f10
ed3fed12392f5d5d2bed11123911393130002b2b1bb638400c0c023b0cb8
ffeab40d0d023b0db8ffeab40d0d023b00b8ffeab40d0d023b2cb8fff0b3
1619372eb8fff0b3090a372bb8ffc0b50e1137013d1fb8ffc0401c0c0d37
1f1f132e4f2a012a2a263f2e04000e1336080a41130a1f0036b8fff8b40c
0c023b36410afff4000b000b014000560036fffa000d000d0140402d5636
1a351a0f0f023b351a0c0c023b35060d0d023b356f3819100e1037191009
0b372b40090b372b2b070c0b0bb80140b45607020d0db80140401f56071b
19160f0f023b19200b0b023b191a0c0c023b19120d0d023b19160c0cb801
40b45619160d0db80140b45619160b0bb80140b35619703710f42b2b2b2b
2b2b2bed2b2b332f2b2b2b10f62b2b2bfd2b2b2b3c3c003fed3f1133333f
ed332f5d1112392f2bed2b2b31302b2b2b2b012b591b401b1f013d6c1f1f
132e2a2a2e263f6c2e04000e133608130a416c130a00183f2b3f1133333f
2b332f1112392f2b30315901110606070606151416333236170606070606
232226272626353436373624373534262726262322060723353636333216
17161615112302f843cd3f4b626c6859903f174d24325d54457c2f2d3662
6a5e010094282424683741b0580b34c25f739e3f3d3cbb01130136061513
175f5560624d64113d121a1c342f2e874b74a3302b210824425116170f27
25bf0f24242f2e9269fd04000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 11104 28 <00010088000003f6047c001601c0b0852b58b10602435458400d0b100842
13040e0601080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8ff
fab40d0d063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b0101181710
0cb8fff8b50c0c063b0c0db8fff4400b0f0f063b0d080d0d063b0db8ffca
b70b0b063b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b00
3f3f3f3fed393231301b401303151615761503100d084213040e05010d08
014113fff4000b000b014000560001fff4000c000c014000560001fffa00
0d000d014000560001fff8400d0c0c023b011a00161010023b00b8fffeb4
0f0f023b00b8ffea400b0d0d023b00060c0c023b00b8ffeab40b0b023b00
410afffa000d000d014000560000fffa000b000b0140400956006f18100b
0c0c0cb80140b4560b060d0db80140b4560b0c0b0bb80140400d560b080c
0c023b0b1a0d080d0db80140b4560d060c0cb80140b4560d060b0bbb0140
0056000dfff640191010023b0d020d0d023b0d060c0c023b0d020b0b023b
0d6e1710f62b2b2b2b2b2b2bfd2b2b2b2b3210f42b2b2b2b2b2b2bed2b2b
2b2b003f3c3f3fed123931305d591b400d100d1308426c13040e05010d08
00183fc43f3f2b1239303159212311342627262623220607112311331536
363332161503f6bc0f15175247469547bcbc54a45ba5ba027c4d85282a29
4b3cfcbe045d7c4b50d9ce000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 11628 29 <000100970000043a05d1000b00bbb0852b58401808350505000435010309
350008000610062006030602060bb8ffe0400f0b0b063b0b670d0f0d0105
09020d0db80140b45609020c0cb80140b456090c0b0bb80140b356091400
b8fffeb40d0d023b00b8fff4b41010063b00b8fffc400b0c0c063b00070d
0d063b00b8ffc2b60b0b063b00640c10f62b2b2b2b2bfd2b2b2b325d10f6
2b32322f5d003fed3fed12392fed31301b40130508356c0505000104356c
01030009356c000800183f2b3f2b12392f2b303159331121152111211521
1121159703a3fd2302abfd5502dd05d1b0fe68b0fdd7b0000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 11864 30 <0001003bffe7038e047700270161b0852b58b1060243545840362f103f10
02100f173f0c04221d2021302102211d3f00090f222229281a0612101006
3b06160f0f063b061c0c0c063b06160d0d063b06b8ffe0b70b0b063b0606
29281112392f2b2b2b2b2bcd1112392fb00b4b5458b90022ffea3859c000
3fedcd5d12393fed39cd5d31301b40143b19311b4d19401b5902550a0622
400e10003b21b8ffc040090b0d3710400b0d370fb8ffc040140e11003b10
100f173f0c042121221d3f00090f22b8ffc0400d091d372222295f29011a
0c0b0bb80140b4561a020d0db80140b4561a040c0cb80140b6561a1b061c
0c0cb80140b45606160d0db80140b45606160b0bb80140401c5606160f0f
023b061a0b0b023b061a0c0c023b061a0d0d023b06702810f42b2b2b2b2b
2b2bed2b2b2b5d11332f2b3c003fed33332f3fed33332f2b2b2b2b31305d
591b401210100f0c173f6c0c04212122001d3f6c000900183f2b33332f3f
2b33332f3031590522262726263534363736363332161715232626272626
2322061514163332363733150606070606024473c045454c4f4242c5715c
ab430b143f2d276a3192b1ab985ca6400b1c5422304c19474848db9493d6
49494f3422d3112c17141eddcac6dd4c3cd30d25090e0f000000>PEUMUK+CairoFont-0-0 AddT42Char 
1 12340 31 <00010088000003f60614001601c0b0852b58b10602435458400d0b100842
13040e0101080d0800b8fff8b50c0c063b0001b8ffe0b41010063b01b8ff
f8b40d0d063b01b8fff4b40c0c063b01b8ffe4400a0b0b063b0101181710
0cb8fff8b50c0c063b0c0db8fff4400b0f0f063b0d060d0d063b0db8ffca
b70b0b063b0d0d18171112392f2b2b2bdd2bc01112392f2b2b2b2bcd2b00
3f3f3f3fed393231301b401303151615761503100d084213040e01010d08
024113fff4000b000b014000560002fff4000c000c014000560002fffa00
0d000d014000560002fff8400d0c0c023b021a00161010023b00b8fffeb4
0f0f023b00b8ffea400b0d0d023b00060c0c023b00b8ffeab40b0b023b00
410afffa000d000d014000560000fffa000b000b0140400956006f18100b
0c0c0cb80140b4560b060d0db80140b4560b0c0b0bb80140400a560b080c
0c023b0b1a0db8fff6401a1010023b0d020d0d023b0d060c0c023b0d020b
0b023b0d060b0bb80140b4560d060c0cb80140b4560d080d0db80140b356
0d6e1710f62b2b2b2b2b2b2bfd2b2b2b2b3c10f42b2b2b2b2b2b2bed2b2b
2b2b003f3c3f3fed123931305d591b400d100d1308426c13040e01010d08
00183fc43f3f2b1239303159212311342627262623220607112311331136
363332161503f6bc0f15175247469547bcbc54a45ba5ba027c4d85282a29
4b3cfcbe0614fdcd4b50d9ce0000>PEUMUK+CairoFont-0-0 AddT42Char 
1 12864 32 <000300970000048905d100150024003301a5b0852b584020050c150c270c
39314a144a315502561569237a190a280e0b0b063b12112c341eb8ffc040
100f0f063b1e1e071d3408032d34070816410afffe000c000c0140005600
16fff4000b000b014040405616060d0d063b1615122c000f400f500f030f
161010063b0f160f0f063b0f0c0c0c023b0f0c0d0d023b0f060c0c063b0f
060d0d063b0f0e0b0b063b0f0f0725410afffe000c000c014000560025ff
f4000b000b0140b356251500b8ffc0b309163700b8ffeab40f0f063b00b8
ffe0b40c0c023b00b8fff2b40d0d023b00b8ffe4b40c0c063b00b8ffdeb4
0d0d063b00b8ffca40130b0b063b0000350f354035cf35031e2c020c0cb8
0140b4562c020d0db80140b4562c0c0b0bb80140b3562c1407b8fffab410
10063b07b8fff8b40f0f063b07b8fffe400b0d0d023b070d0d0d063b07b8
ffc4b60b0b063b07643410f62b2b2b2b2bfd2b2b2b325d11332f2b2b2b2b
2b2b2bed2b2b12392f2b2b2b2b2b2b2b5d1239ed2b2b2b003fed3fed1239
2f2bed393931302b015d1b401512111e2c346c1e1e07081d346c0803072d
346c070800183f2b3f2b12392f2b39393031590114060706062321112132
161716161514060715161601342627262623231133323637363613342627
26262323113332363736360489544754c098fe55018b9f9f49504a6f6285
92feec2428307668bee15d582f2d264630492f6f66e1a1829639383401c9
6faa37423705d115272b8b5e69a62f0824bf020d364f171b0cfe4c131e1d
5efda1546d26190efdda18272763>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g12 12 def
/g13 13 def
/g14 14 def
/g15 15 def
/g16 16 def
/g17 17 def
/g18 18 def
/g19 19 def
/g20 20 def
/g21 21 def
/g22 22 def
/g23 23 def
/g24 24 def
/g25 25 def
/g26 26 def
/g27 27 def
/g28 28 def
/g29 29 def
/g30 30 def
/g31 31 def
/g32 32 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 12 /g12 put
dup 13 /g13 put
dup 14 /g14 put
dup 15 /g15 put
dup 16 /g16 put
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
dup 22 /g22 put
dup 23 /g23 put
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
dup 27 /g27 put
dup 28 /g28 put
dup 29 /g29 put
dup 30 /g30 put
dup 31 /g31 put
dup 32 /g32 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 223{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [-1.47e-15 -8 -8 1.47e-15 0 0 ]msf
10.8242 169.793 mo
(\014\015\016\017\001\020\021\022\023\001\024\016\022\025)
[-4.66394 -1.82397 -6.71204 -4.20801 -2.49597 -4.80005 -4.33606 -3.56799 -2.672 -2.49597 -3.05603 -6.71204 
-3.56799 0 ]ysh
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
55.4844 212.727 mo
(\026\027\016\030\001\021\031\001\014\032\033\034\022\015\023\015\021\034\022\001\021\034\001\035\033\036\037\001 \032\033\034\036\037)
[5.33606 4.45605 6.71204 2.41602 2.49597 4.33606 2.54395 2.49597 4.66394 2.88 4.19202 4.45605 
3.56799 1.82397 2.672 1.82397 4.33606 4.45605 3.56799 2.49597 4.33606 4.45605 2.49597 4.48804 
4.19202 3.68799 4.45605 2.49597 4.71204 2.88 4.19202 4.45605 3.68799 0 ]xsh
75.551 141.449 mo
75.551 101.699 li
145.5 101.699 li
145.5 141.449 li
75.551 141.449 li
@
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 13448 33 <0002fff6000004d605d10007000a0170b0852b58b304020c0cb80140b456
0a0a0c0cb80140b456060a0c0cb80140b456070a0c0c4113014000560008
fff8000b000b014000560005fff8000b000b014000560004fff8000b000b
0140b4560a080b0bb80140b45606080b0bb80140b45607080b0bb9014000
56b10602435458b90002fff4401f0d0d063b010c0d0d063b080a050a3406
060900010304080008030409000709b8ffdeb70b0b063b09090c0b111239
2f2bd4cd10d4cd003f3f3f1239392fedc010c03130012b2b1b404a05000a
0325002a030409090a08058704010414030203090a068707010714000001
05010a0215011a022601290245004a0145024a0375007a030c0634300a40
0a020a090a010303000803b8ffc0401509113703030c0f0c1f0c3f0c7f0c
8f0c050f0c01002f5d5d11332f2b003f3c3f39392f5ded3130015d8710fd
5dc0c0c08710fd5dc0c008c0015d592b2b2b2b2b2b2b2b2b2b1b400d0a06
346c0a090a00010303000800183fc43f1239392f2b303159230133012303
21030103030a01f6f401f6d187fdc7870289e6e505d1fa2f01a0fe600249
02befd42>PEUMUK+CairoFont-0-0 AddT42Char 
1 13872 34 <000200970000051805d10010001f012ab0852b584045450f451d020a0119
012c013a003d014c014a145a015914591d6b016a14790177107b140f010c
0d0d063b0201b300100010071a3402400f0f063b02020518340603000508
11bbfff4000b000b0140400d5611150f0d010d0c0b0b023b0db8fff4401b
0c0c023b0d100d0d023b0d0c0c0c063b0d0c0d0d063b0d0d100500b8ffc0
b309113700b8ffc8400c0b0b063b0000211903020c0db80140b456030c0b
0bb80140b356031405b8fffeb40d0d023b05b8fff4400b1010063b05040d
0d063b05b8ffc4b60b0b063b05642010f42b2b2b2bfd2b2b3211332f2b2b
1239392f2b2b2b2b2b5ded2b003f3c3fed12392f2bed123931300187107a
fd18c0012b5d005d1b40121007021a346c0202050618346c060300050800
183fc43f2b12392f2b123930315921210123112311213216171616151406
071334262726262323113332363736360518fefffe28e2c6018080ad4e4e
5ba68f662e302a7053c4ae5588302b290250fdb005d11c33329e75a4dc35
01a64165201c17fdce1e2f2a7400>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g33 33 def
/g34 34 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 33 /g33 put
dup 34 /g34 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 221{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
96.293 108.875 mo
(\014!")
[4.66394 4.79199 0 ]xsh
115.148 105.699 mo
141.102 105.699 li
.591608 .864042 0 0 cmyk
@
34.648 189.148 mo
51.5 181.75 li
68.352 145.801 li
70.852 95.75 li
@
31.648 189.148 mo
37.648 189.148 li
@
34.648 186.148 mo
34.648 192.148 li
@
48.5 181.75 mo
54.5 181.75 li
@
51.5 178.75 mo
51.5 184.75 li
@
65.352 145.801 mo
71.352 145.801 li
@
68.352 142.801 mo
68.352 148.801 li
@
125.102 105.699 mo
131.102 105.699 li
@
128.102 102.699 mo
128.102 108.699 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 14276 35 <000200970000044305d10010001f0101b0852b5840243a143a1d4b144b1d
500e540f650f781c081934000710074f070307070918340a03090811410a
fffe000c000c014000560011fff4000b000b0140400a5611100d0d063b11
1500b8ffc0b309113700b8fff4b40c0c023b00b8ffd6b40c0c063b00b8ff
cc40150b0b063b00080d0d063b0000210f21011907020c0db80140b45607
0c0b0bb80140b356071409b8fffeb40d0d023b09b8fff2400b1010063b09
060d0d063b09b8fffcb40c0c063b09b8ffc6b60b0b063b09642010f42b2b
2b2b2bfd2b2b325d11332f2b2b2b2b2bed2b2b2b003f3fed12392f5ded31
30015d1b400f0719346c0707090a18346c0a03090800183f3f2b12392f2b
303159011406070606232311231121321617161607342627262623231133
32363736360443453d4dd09fa8c6017684ba47535ece35362f7d5da48778
94312c28041061ad3d4c4efdd505d12c3139af814d72241f1afdad27322d
6a000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g35 35 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 35 /g35 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 220{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
101.602 116.824 mo
( #)
[4.71204 0 ]xsh
1.5 lw
115.148 113.648 mo
141.102 113.648 li
.883665 .769162 0 0 cmyk
@
34.648 189.551 mo
51.5 189.449 li
68.352 189.301 li
85.25 189.051 li
102.102 188.648 li
118.949 188.199 li
135.801 187.551 li
152.648 186.5 li
169.551 185.602 li
186.398 184.301 li
203.25 182.25 li
@
31.648 186.551 mo
37.648 192.551 li
@
31.648 192.551 mo
37.648 186.551 li
@
48.5 186.449 mo
54.5 192.449 li
@
48.5 192.449 mo
54.5 186.449 li
@
65.352 186.301 mo
71.352 192.301 li
@
65.352 192.301 mo
71.352 186.301 li
@
82.25 186.051 mo
88.25 192.051 li
@
82.25 192.051 mo
88.25 186.051 li
@
99.102 185.648 mo
105.102 191.648 li
@
99.102 191.648 mo
105.102 185.648 li
@
115.949 185.199 mo
121.949 191.199 li
@
115.949 191.199 mo
121.949 185.199 li
@
132.801 184.551 mo
138.801 190.551 li
@
132.801 190.551 mo
138.801 184.551 li
@
149.648 183.5 mo
155.648 189.5 li
@
149.648 189.5 mo
155.648 183.5 li
@
166.551 182.602 mo
172.551 188.602 li
@
166.551 188.602 mo
172.551 182.602 li
@
183.398 181.301 mo
189.398 187.301 li
@
183.398 187.301 mo
189.398 181.301 li
@
200.25 179.25 mo
206.25 185.25 li
@
200.25 185.25 mo
206.25 179.25 li
@
125.102 110.648 mo
131.102 116.648 li
@
125.102 116.648 mo
131.102 110.648 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 14640 36 <0001004dffe5044205ec003301ccb0852b5840462f0d29142b2b3902390d
361c35274a02450a4a0c451c492444275a02560a590f5a18551c5e246506
6a136c156618651c6628602c6830761c1c7a0e742802282b110e04001a1e
b8ffc040150b0b013c1f1e2f1e7f1e031e1e22341a0271050105b8ffc0b3
090b3705b8ffc0401a0f0f013c05400b0b013c05050834000a282b110e04
2e171e1e0b410afffe000c000c01400056000bfff2000b000b0140400a56
0b0c0d0d063b0b152ebeffea000b000b01400056002effc0400a0914372e
0c0b0b023b2eb8ffd4b40d0d023b2eb8ffe8b40f0f063b2eb8ffeeb40c0c
063b2eb8ffe6b40d0d063b2eb8ffd040120b0b063b2e2e350f354f350204
0425020c0cb80140b456250c0b0bbb014000560025fff440300d0d063b25
15a017b0170217100b0b023b170c0c0c023b170c0d0d023b170e0f0f063b
170c0c0c063b170c0d0d063b17b8ffdcb40b0b063b17b8ffc0b60c113717
120b0bb80140b156172f2b2b2b2b2b2b2b2b2b5ded2b2b2b332f5d11332f
2b2b2b2b2b2b2b2bed2b2b2b332f11121739003fed332f2b2b2b5d3fed33
2f5d2b111217395d31305d1b4017282b110e04001a1e1e1a22346c1a0205
050008346c000a00183f2b332f3f2b332f11121739303159052226273533
161633323635342627262627262627262635342433321617152326262322
061514161716161716161514060706060236a2e3640e62f873a4a8586045
72564d7a2f2e33011adb7ddf5f0f47de7a8aaa645f3fb63c9a8e474048b5
1b4331f85c65897059701b141a16143e32318557b5f5322eed416181695f
701a112b122fbe8b57aa3b4146000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g36 36 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 36 /g36 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 219{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
97.1875 124.773 mo
(#\014$)
[4.40796 4.66394 0 ]xsh
115.148 121.602 mo
141.102 121.602 li
0 .993988 1 0 cmyk
@
34.648 188.602 mo
38.949 95.75 li
@
31.648 188.602 mo
37.648 188.602 li
@
34.648 185.602 mo
34.648 191.602 li
@
125.102 121.602 mo
131.102 121.602 li
@
128.102 118.602 mo
128.102 124.602 li
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 15256 37 <000100970000041205d1000900b1b0852b58401105350202070135080307
08000301030300b8ffc0b309113700b8ffcc40110b0b063b00000b0f0b1f
0b020205020d0db80140b45605020c0cb80140b456050c0b0bb80140b356
051407b8fffeb40d0d023b07b8fffab41010063b07b8fff8b40f0f063b07
b8ffc2b60b0b063b07640a10f62b2b2b2bfd2b2b2b325d11332f2b2b332f
5d003f3fed12392fed31301b400f0205356c0202070801356c0803070800
183f3f2b12392f2b303159012111211521112311210412fd4b0298fd68c6
037b0521fe5cb0fd3305d1000000>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g37 37 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 37 /g37 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 218{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
97.293 132.727 mo
(\020%$)
[4.80005 4.16797 0 ]xsh
115.148 129.551 mo
141.102 129.551 li
0 .408423 1 0 cmyk
@
34.648 188.602 mo
38.898 95.75 li
@
31.648 190.602 mo
34.648 185.602 li
37.648 190.602 li
cp
@
125.102 131.551 mo
128.102 126.551 li
131.102 131.551 li
cp
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: XCNAAA+CairoFont-0-0 AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PEUMUK+CairoFont-0-0 gcheck setglobal} if
1 15480 38 <0001000a000003ec045d000b015bb0852b58bc0008fffa000d000d0140b4
5602060d0db901400056b10602435458b6020c0b10063b08b8fff440260b
10063b02050b0804060409050605010804080a0902060702000102040308
02140e0f063b02b8fff4b60b0b063b020d0c10f42b2bc5ddcd10ddcd10dd
cd10ddcd003f3f3f3f1112173931302b2b1b405008080705040506040902
02010b0a0b000a030808090b000b0a0007020203050605040601090a0303
b404091404040901000707b406011406060102050b080400010304080a09
070605080b050204000ab8ffc0b30915370ab8fff040110b0b023b0a0a0d
2f0d5f0d6f0d03069604b8fff4b40b0b023b042f2be45d11332f2b2b3c17
39003f3c3c3c3f3c3c3c173987052e2b877dc4872e182b877dc48708103c
08c48708103c08c48708103c08c48708103c08c4313059042b2b1b401002
050b08040600010304080a0907060500183fc4c4c43fc4c4c41217393031
5921230101230101330101330103ece7fef1fee9d50184fe80e7010d0114
d6fe7e01a6fe5a022a0233fe5e01a2fdda00>PEUMUK+CairoFont-0-0 AddT42Char 
1 15888 39 <00020042ffe1056705f000170029015db0852b58b90015ffe8b40e0e003b
15b8ffe8401f090a003b09180e0e003b0918090a003b1e3415022734090a
18060d0d063b18410afffe000c000c014000560018fff4000b000b0140b6
56181578030103410dfff4000d000d014000560003fff4000b000b014000
560003ffeab40b0b023b03b8ffe0b40d0d023b03b8ffecb40c0c063b03b8
ffecb40d0d063b03b8ffdc40170b0b063b03672b0f2b1f2b3f2b7f2b040f
2b0124020c0cb80140b456240c0b0bbb014000560024fff840340d0d063b
2415770f010f160d0d023b0f160c0c023b0f200b0b023b0f0e1010063b0f
0e0f0f063b0f140d0d063b0f160c0c063b0fb8ffe0b70b0b063b0f160d0d
b80140b4560f140c0cb80140b4560f0c0b0bb80140b3560f662a10f62b2b
2b2b2b2b2b2b2b2b2b5ded2b2b2b5d5d10f62b2b2b2b2b2b2b5ded2b2b2b
003fed3fed2b2b2b2b31301b400c151e346c15020927346c090a00183f2b
3f2b30315901161215140207060623222627260235341237363633321613
342627262623220607060615101233321204b4555e5c575bf39297f25756
5c5d5656f39698f439403a3ba7686ca13e3b3ff6cfcff5052662fedebab5
fedc6368636665630122b7bc011c6663676afd6294e44b4d4d4b4f4ce691
fedbfec901370000>PEUMUK+CairoFont-0-0 AddT42Char 
2 0 40 <00010085ffe104ba05d1001d0153b0852b58400c1f400b0b023b3a004a00
0200b8ffe8b40c0c023b0cb8fff4b40d0d063b00b8ffe8400e0d0d063b17
0703270f010f180d0db80140b4560f180c0cb80140b3560f3400410dffe8
000d000d014000560000ffe8000c000c014000560000ffe8b60c0c063b00
0a16410afffe000c000d014000560016fff4000b000b0140b356161417b8
fffc40110c0c023b170e0b0b023b171a0d0d023b17b8ffeeb41010063b17
b8ffe0b40f0f063b17b8fff4b40c0c063b17b8fffbb40d0d063b17b8ffe0
40100b0b063b17171f0f1f401f0208020c0db80140b456080c0b0bb80140
b356081407b8ffc0400a09113707060b0b023b07b8fff6400b1010063b07
0e0d0d063b07b8ffc4b60b0b063b07071e11332f2b2b2b2b2bed2b2b5d11
332f2b2b2b2b2b2b2b2bed2b2b003f2b2b2bed2b2b5d3f3c2b2b2b5d3130
012b1b4009170703000fbf6c000a00183f2b3fc430315905222627262635
1133111416171616333236373636351133111406070606029f83c4454e40
c61a262889635d9028251bc63f4f47bd1f45444ed99f03a1fc5f678d383c
3e3e3c398a6403a6fc5f9bde4d454400>PEUMUK+CairoFont-0-0 AddT42Char 
PEUMUK+CairoFont-0-0 /CharStrings get begin
/g38 38 def
/g39 39 def
/g40 40 def
end
PEUMUK+CairoFont-0-0 /Encoding get
dup 38 /g38 put
dup 39 /g39 put
dup 40 /g40 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/PEUMUK+CairoFont-0-0*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 /g38 /g39 
/g40 215{/.notdef}rp]
PEUMUK+CairoFont-0-0 nf
PEUMUK+CairoFont-0-0*1 [8 0 0 -8 0 0 ]msf
81.4414 140.676 mo
(\035&"'"\()
[4.48804 3.95996 4.95996 5.65601 4.95996 0 ]xsh
115.148 137.5 mo
141.102 137.5 li
.627649 0 1 0 cmyk
@
34.648 189.301 mo
51.5 188.699 li
68.352 187.25 li
85.25 183.852 li
102.102 181.102 li
118.949 176.051 li
135.801 168.5 li
152.648 159.801 li
169.551 148.199 li
186.398 135.051 li
203.25 116.949 li
@
31.648 186.301 mo
31.648 192.301 li
37.648 192.301 li
37.648 186.301 li
cp
@
48.5 185.699 mo
48.5 191.699 li
54.5 191.699 li
54.5 185.699 li
cp
@
65.352 184.25 mo
65.352 190.25 li
71.352 190.25 li
71.352 184.25 li
cp
@
82.25 180.852 mo
82.25 186.852 li
88.25 186.852 li
88.25 180.852 li
cp
@
99.102 178.102 mo
99.102 184.102 li
105.102 184.102 li
105.102 178.102 li
cp
@
115.949 173.051 mo
115.949 179.051 li
121.949 179.051 li
121.949 173.051 li
cp
@
132.801 165.5 mo
132.801 171.5 li
138.801 171.5 li
138.801 165.5 li
cp
@
149.648 156.801 mo
149.648 162.801 li
155.648 162.801 li
155.648 156.801 li
cp
@
166.551 145.199 mo
166.551 151.199 li
172.551 151.199 li
172.551 145.199 li
cp
@
183.398 132.051 mo
183.398 138.051 li
189.398 138.051 li
189.398 132.051 li
cp
@
200.25 113.949 mo
200.25 119.949 li
206.25 119.949 li
206.25 113.949 li
cp
@
125.102 134.5 mo
125.102 140.5 li
131.102 140.5 li
131.102 134.5 li
cp
@
.5 lw
34.648 95.75 mo
34.648 189.648 li
203.25 189.648 li
203.25 95.75 li
34.648 95.75 li
.75021 .679683 .670222 .90164 cmyk
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/PEUMUK+CairoFont-0-0*1 uf
/PEUMUK+CairoFont-0-0 uf
/XCNAAA+CairoFont-0-0 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
